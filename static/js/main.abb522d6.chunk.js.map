{"version":3,"sources":["components/Statistics/Statistics.js","components/Button/Button.js","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Layout/Layout.js","components/Notification/Notification.js","components/App.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","Button","title","onChangeStatistics","type","onClick","FeedbackOptions","options","onLeaveFeedback","map","key","Section","children","defaultProps","Layout","className","Notification","message","App","state","handleChangeStatistics","setState","preventState","countTotalFeedback","Object","values","reduce","sum","current","isFeedbackValue","Boolean","countPositiveFeedbackPercentage","totalValue","positivValue","Math","round","this","feedBackName","keys","feedbackVisible","Component","ReactDOM","render","document","getElementById"],"mappings":"4QAsBeA,MAnBf,YAAsE,IAAjDC,EAAgD,EAAhDA,KAAMC,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,IAAKC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,mBAC5C,OACI,4BACI,qCAAU,8BAAOJ,IACjB,wCAAa,8BAAOC,IACpB,oCAAS,8BAAOC,IAChB,sCAAW,8BAAOC,IACjBH,EAAO,GAAM,kDAAuB,8BAAOI,EAAP,QCIlCC,EAXA,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,mBAAT,OACX,4BAAQC,KAAK,SAASC,QAAS,kBAAMF,MAChCD,ICiBMI,MAlBf,YAAsD,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,gBAC/B,OACI,oCACKD,EAAQE,KAAI,SAAAC,GAAG,OACZ,kBAAC,EAAD,CAAQA,IAAKA,EAAKR,MAAOQ,EAAKP,mBAAoB,kBAAMK,EAAgBE,WCJxF,SAASC,EAAT,GAAqC,IAAnBT,EAAkB,EAAlBA,MAAOU,EAAW,EAAXA,SACrB,OACI,iCACI,4BAAKV,GACJU,GAKbD,EAAQE,aAAe,CACnBX,MAAO,IAQIS,QCZAG,G,MANA,SAAC,GAAD,IAAGF,EAAH,EAAGA,SAAH,OAAkB,yBAAKG,UAAU,UAAUH,KCD1D,SAASI,EAAT,GAAkC,IAAXC,EAAU,EAAVA,QACnB,OACI,2BACKA,GAKbD,EAAaH,aAAe,CACxBI,QAAS,qBAQED,QCbME,E,2MAEnBC,MAAQ,CACJvB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGTsB,uBAAyB,SAAChB,GACtB,EAAKiB,UACD,SAAAC,GAAY,sBAAOlB,EAAOkB,EAAalB,GAAM,O,EAIrDmB,mBAAqB,kBAAMC,OAAOC,OAAO,EAAKN,OAAOO,QAAO,SAACC,EAAKC,GAAN,OAAkBD,EAAMC,IAAS,I,EAE7FC,gBAAkB,kBAAMC,QAAQ,EAAKX,MAAMvB,MAAQ,EAAKuB,MAAMtB,SAAW,EAAKsB,MAAMrB,M,EAEpFiC,gCAAkC,SAACC,EAAYC,GAAb,OAA+BC,KAAKC,MAAMF,EAAaD,EAAW,M,wEAG1F,IAAD,EACwBI,KAAKjB,MAA5BvB,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBuC,EAAeb,OAAOc,KAAKF,KAAKjB,OAChCoB,EAAkBH,KAAKP,kBACvB9B,EAAQqC,KAAKb,qBACbvB,EAAqBoC,KAAKL,gCAAgChC,EAAOqC,KAAKjB,MAAMvB,MAClF,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAASM,MAAQ,yBACf,kBAAC,EAAD,CAAiBK,QAAS8B,EAAc7B,gBAAiB4B,KAAKhB,0BAEhE,kBAAC,EAAD,CAASlB,MAAQ,cACdqC,EACD,kBAAC,EAAD,CAAY3C,KAAMA,EAAMC,QAASA,EAASC,IAAKA,EAAKC,MAAOA,EAAOC,mBAAoBA,IACtF,kBAAC,EAAD,CAAciB,QAAU,4B,GAnCDuB,a,MCFjCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.abb522d6.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Statistics({good, neutral, bad, total, positivePercentage}) {\r\n    return (\r\n        <ul>\r\n            <li>Good: <span>{good}</span></li>\r\n            <li>Neutral: <span>{neutral}</span></li>\r\n            <li>Bad: <span>{bad}</span></li>\r\n            <li>Total: <span>{total}</span></li>\r\n            {good > 0 && (<li>Positive Feedback: <span>{positivePercentage}%</span></li>)}                    \r\n        </ul>\r\n    )        \r\n}\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    positivePercentage: PropTypes.number.isRequired,\r\n}\r\nexport default Statistics;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Button = ({title, onChangeStatistics}) => (\r\n    <button type=\"button\" onClick={() => onChangeStatistics()}>\r\n        {title}\r\n  </button>\r\n);\r\n\r\nButton.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  onChangeStatistics: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport Button from \"../Button\";\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction FeedbackOptions({options, onLeaveFeedback}) {\r\n    return (\r\n        <>\r\n            {options.map(key => (\r\n                <Button key={key} title={key} onChangeStatistics={() => onLeaveFeedback(key)} />\r\n            ))}\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n    options: PropTypes.arrayOf(\r\n        PropTypes.string.isRequired\r\n    ),\r\n    onLeaveFeedback: PropTypes.func.isRequired\r\n};\r\n\r\nexport default FeedbackOptions;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nfunction Section({title, children}) {\r\n    return (\r\n        <section>\r\n            <h2>{title}</h2>            \r\n            {children}\r\n        </section>\r\n    )\r\n}\r\n\r\nSection.defaultProps = {\r\n    title: ''\r\n};\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string,\r\n    children: PropTypes.node.isRequired\r\n};\r\n\r\nexport default Section;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Layout.css';\r\n\r\nconst Layout = ({ children }) => <div className=\"Layout\">{children}</div>;\r\n\r\nLayout.propTypes = {\r\n    children: PropTypes.node.isRequired\r\n}\r\n\r\nexport default Layout;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Notification({message}) {\r\n    return (\r\n        <p>\r\n            {message}\r\n        </p>\r\n    )\r\n}\r\n\r\nNotification.defaultProps = {\r\n    message: 'No feedback given'\r\n};\r\n\r\n\r\nNotification.propTypes = {\r\n    message: PropTypes.string\r\n};\r\n\r\nexport default Notification;","import React, { Component } from 'react';\r\nimport Statistics from './Statistics';\r\nimport FeedbackOptions from './FeedbackOptions';\r\nimport Section from './Section';\r\nimport Layout from './Layout';\r\nimport Notification from './Notification';\r\n\r\nexport default class App extends Component {\r\n\r\n  state = {\r\n      good: 0,\r\n      neutral: 0,\r\n      bad: 0\r\n  };\r\n    \r\n  handleChangeStatistics = (type) => {\r\n      this.setState(\r\n          preventState => ({[type]: preventState[type]+1})\r\n      )\r\n  };\r\n\r\n  countTotalFeedback = () => Object.values(this.state).reduce((sum, current) => sum + current, 0);\r\n\r\n  isFeedbackValue = () => Boolean(this.state.good || this.state.neutral || this.state.bad);\r\n\r\n  countPositiveFeedbackPercentage = (totalValue, positivValue) =>  Math.round(positivValue/totalValue*100);\r\n \r\n\r\n  render() {\r\n    const { good, neutral, bad } = this.state;    \r\n    const feedBackName = Object.keys(this.state);    \r\n    const feedbackVisible = this.isFeedbackValue();\r\n    const total = this.countTotalFeedback();\r\n    const positivePercentage = this.countPositiveFeedbackPercentage(total, this.state.good);\r\n    return (\r\n      <Layout>\r\n        <Section title = 'Please leave feedback'>\r\n          <FeedbackOptions options={feedBackName} onLeaveFeedback={this.handleChangeStatistics}/>\r\n        </Section>\r\n        <Section title = 'Statistics'>\r\n          {feedbackVisible ? \r\n          <Statistics good={good} neutral={neutral} bad={bad} total={total} positivePercentage={positivePercentage} /> :\r\n          <Notification message = 'No feedback given' />}\r\n        </Section>\r\n      </Layout>\r\n    )        \r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './base.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}