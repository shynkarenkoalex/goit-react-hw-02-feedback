{"version":3,"sources":["components/Statistics/Statistics.js","components/Button/Button.js","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Layout/Layout.js","components/Notification/Notification.js","components/App.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","Button","title","onChangeStatistics","type","onClick","FeedbackOptions","options","onLeaveFeedback","map","option","key","Section","children","defaultProps","Layout","className","Notification","message","App","state","handleChangeStatistics","setState","preventState","countTotalFeedback","Object","values","reduce","sum","current","countPositiveFeedbackPercentage","totalValue","positivValue","Math","round","this","feedBackName","keys","Component","ReactDOM","render","document","getElementById"],"mappings":"4QAkCeA,MA/Bf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,4BACE,qCACQ,8BAAOJ,IAEf,wCACW,8BAAOC,IAElB,oCACO,8BAAOC,IAEd,sCACS,8BAAOC,IAEfH,EAAO,GACN,kDACqB,8BAAOI,EAAP,QCNdC,EAXA,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,mBAAV,OACb,4BAAQC,KAAK,SAASC,QAAS,kBAAMF,MAClCD,ICkBUI,MAnBf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBAClC,OACE,oCACGD,EAAQE,KAAI,SAAAC,GAAM,OACjB,kBAAC,EAAD,CACEC,IAAKD,EACLR,MAAOQ,EACPP,mBAAoB,kBAAMK,EAAgBE,WCRpD,SAASE,EAAT,GAAuC,IAApBV,EAAmB,EAAnBA,MAAOW,EAAY,EAAZA,SACxB,OACE,iCACE,4BAAKX,GACJW,GAKPD,EAAQE,aAAe,CACrBZ,MAAO,IAQMU,QCXAG,G,MANA,SAAC,GAAD,IAAGF,EAAH,EAAGA,SAAH,OAAkB,yBAAKG,UAAU,UAAUH,KCD1D,SAASI,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,2BAAIA,GAGbD,EAAaH,aAAe,CAC1BI,QAAS,qBAOID,QCRME,E,2MACnBC,MAAQ,CACNxB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPuB,uBAAyB,SAAAjB,GACvB,EAAKkB,UAAS,SAAAC,GAAY,sBAAQnB,EAAOmB,EAAanB,GAAQ,O,EAGhEoB,mBAAqB,kBACnBC,OAAOC,OAAO,EAAKN,OAAOO,QAAO,SAACC,EAAKC,GAAN,OAAkBD,EAAMC,IAAS,I,EAEpEC,gCAAkC,SAACC,EAAYC,GAAb,OAChCC,KAAKC,MAAOF,EAAeD,EAAc,M,wEAEjC,IAAD,EACwBI,KAAKf,MAA5BxB,EADD,EACCA,KAAMC,EADP,EACOA,QAASC,EADhB,EACgBA,IACjBsC,EAAeX,OAAOY,KAAKF,KAAKf,OAChCrB,EAAQoC,KAAKX,qBACbxB,EAAqBmC,KAAKL,gCAC9B/B,EACAoC,KAAKf,MAAMxB,MAEb,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAASM,MAAM,yBACb,kBAAC,EAAD,CACEK,QAAS6B,EACT5B,gBAAiB2B,KAAKd,0BAG1B,kBAAC,EAAD,CAASnB,MAAM,cACZiC,KAAKX,mBAAqB,EACzB,kBAAC,EAAD,CACE5B,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBA,IAGtB,kBAAC,EAAD,CAAckB,QAAQ,4B,GA3CDoB,a,MCFjCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.90e6676a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\r\n  return (\r\n    <ul>\r\n      <li>\r\n        Good: <span>{good}</span>\r\n      </li>\r\n      <li>\r\n        Neutral: <span>{neutral}</span>\r\n      </li>\r\n      <li>\r\n        Bad: <span>{bad}</span>\r\n      </li>\r\n      <li>\r\n        Total: <span>{total}</span>\r\n      </li>\r\n      {good > 0 && (\r\n        <li>\r\n          Positive Feedback: <span>{positivePercentage}%</span>\r\n        </li>\r\n      )}\r\n    </ul>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired\r\n};\r\nexport default Statistics;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Button = ({ title, onChangeStatistics }) => (\r\n  <button type=\"button\" onClick={() => onChangeStatistics()}>\r\n    {title}\r\n  </button>\r\n);\r\n\r\nButton.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  onChangeStatistics: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport Button from \"../Button\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\r\n  return (\r\n    <>\r\n      {options.map(option => (\r\n        <Button\r\n          key={option}\r\n          title={option}\r\n          onChangeStatistics={() => onLeaveFeedback(option)}\r\n        />\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Section({ title, children }) {\r\n  return (\r\n    <section>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n}\r\n\r\nSection.defaultProps = {\r\n  title: \"\"\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node.isRequired\r\n};\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Layout.css\";\r\n\r\nconst Layout = ({ children }) => <div className=\"Layout\">{children}</div>;\r\n\r\nLayout.propTypes = {\r\n  children: PropTypes.node.isRequired\r\n};\r\n\r\nexport default Layout;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Notification({ message }) {\r\n  return <p>{message}</p>;\r\n}\r\n\r\nNotification.defaultProps = {\r\n  message: \"No feedback given\"\r\n};\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string\r\n};\r\n\r\nexport default Notification;\r\n","import React, { Component } from \"react\";\r\nimport Statistics from \"./Statistics\";\r\nimport FeedbackOptions from \"./FeedbackOptions\";\r\nimport Section from \"./Section\";\r\nimport Layout from \"./Layout\";\r\nimport Notification from \"./Notification\";\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0\r\n  };\r\n\r\n  handleChangeStatistics = type => {\r\n    this.setState(preventState => ({ [type]: preventState[type] + 1 }));\r\n  };\r\n\r\n  countTotalFeedback = () =>\r\n    Object.values(this.state).reduce((sum, current) => sum + current, 0);\r\n\r\n  countPositiveFeedbackPercentage = (totalValue, positivValue) =>\r\n    Math.round((positivValue / totalValue) * 100);\r\n\r\n  render() {\r\n    const { good, neutral, bad } = this.state;\r\n    const feedBackName = Object.keys(this.state);\r\n    const total = this.countTotalFeedback();\r\n    const positivePercentage = this.countPositiveFeedbackPercentage(\r\n      total,\r\n      this.state.good\r\n    );\r\n    return (\r\n      <Layout>\r\n        <Section title=\"Please leave feedback\">\r\n          <FeedbackOptions\r\n            options={feedBackName}\r\n            onLeaveFeedback={this.handleChangeStatistics}\r\n          />\r\n        </Section>\r\n        <Section title=\"Statistics\">\r\n          {this.countTotalFeedback > 0 ? (\r\n            <Statistics\r\n              good={good}\r\n              neutral={neutral}\r\n              bad={bad}\r\n              total={total}\r\n              positivePercentage={positivePercentage}\r\n            />\r\n          ) : (\r\n            <Notification message=\"No feedback given\" />\r\n          )}\r\n        </Section>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './base.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}